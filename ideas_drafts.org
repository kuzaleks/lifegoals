
* One of the first steps is to find the entry point to a system

* Ideas for Startup
** Environment for debugging of concurrent systems
** Create lightweight dialog system system with voice recognition for bicycle riders
   It can be both mobile or web application
* It might be the case that this peculiar way of thinking that is so common within IT is what helps them do be a good developers
* How can we use a single the proof for the infinite use cases?
  May be there is a relation between the phenomenon of convergence of
  infinite sums (integrals) and the essence of proof for the infinite number
  of use cases?
* Can we consider the sexual act as the way to consume the beauty?
  We can say that something is sexy when we can see either outer of inner
  beauty in that. The sexual desire for beautiful women can be considered 
  as the most obvious case.
* One of the main purposes of Blogs is the public inside info that might substitute the live informal communication
* Knowledge acquisition algorithm 
** Come from what you know to the new knowledge
*** Face with the problem and understand the motivation
*** Try to resolve with tools that you already have
*** Take a look at the solution with new tool without insights of it
*** Read the specification of the new tool
*** Explain to somebody with simple examples
*** Facilitate everything with state-of-art IT support
* The perception of the music as the pure continuous process of comprehension
  Your mind continuously percepts and comprehand the inner logical(?) structure
  of the phenomenon. It might cause the sense of pleasure and satisfaction.
  It raises the question whether we can teach and learn using music of other
  signals like visual signal. Can we use this process of continuous 
  comprehension to create the appropriate structures in a brain or in mind or
  in soul.
* Programming course
  Initially flood students with simple task in order to reinforce their
  skills of basic concepts and tools
* Create voice bot for the bicycle drivers
  As the objective. There is much simplear to create reliable voice recognition
  for the limited context
* Concepts and skills in your memory accelerate thinking
  When you load into your mind concepts, their structure and refine all that by
  rehearsal on dozens of examples, you can quickly operate on that and solve even
  complex tasks. The reason is that whole solution can fit in operate memory
  and utilize it's speed. The additional important attribute is to know the exact numbers
  of the real world context.
* OOP Design as an approximation of Descrite reality modeling using Finate Automata
  It's known that continuous systems are modeled with differential equations. In contrast,
  descrete systems are modeled by Finate Automata. May be the idea behind OOP design is 
  create informal approximation of finate automatas for reality modeling. Each object persist
  state and states (State) are changed by calling the appropriate methods (Action or Event)
* The idea to use HMM for fast strings clusterisation and search
* The idea of "Famework development"
  The main goal is to create (implement) common complex command (pattern) using more simple generic
  commands. For example, Git frameworks are implemented using generic programming language
  constructs. These constructs get translated into machine commands. Machine commands trigger
  simple controls and data flows in a hardware.
* The idea of incremental knowledge building
  Let's assume that the main goal is to workout the full understanding of some phenomenon.
  In this situation making the knowledge transfer we need to respect the following constraints:
  we need to fit in time slot. As a result we need to embed the new info into existing knowledge
  structure. So, the prerequisites is the essential part of every knowledge transfer.
* If you've decided what you really want -- you are released from doubts.
* The concept "Continuous Learning" or "Continuous Education"
  The idea to provide the mechanism for the system continuously using it's working data 
  in order to improve the performace.
  - Example. The speech recognition system might use it's users phrases and voice for
    continuous customization
  - Routing system might catch traffic patterns and use it for better redistribution
  The principle might be extend in the following way. Every component might collect
  it's usage data in order to improve it's behavior

* Develope app that recognizes Design Pattern in a Code using ML

* Graph DB deployed on NoSQL key-value stores can be a good alternative ot a relative DB.
