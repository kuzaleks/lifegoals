
* Test of interaction with OS
  The essential part of non-functional testing is to verify the interaction with OS.
  cases: Memory leak, too many opened files left, etc.
* SQL queries is essentially the program written fully in Functional Language
  In fact, when you compose SQL queries you, essentially use higher order
  function like `map`, `filter`, `mapReduce` to retrieve and edit data. It implies
  that you can use your skills in Functional Programming to compose complex SQL queries
  rather than train them from the scratch
* What the Software Architecture is about
  The SA typically features those aspects of a system which are the hardes to be edited 
  or substituted. One of the purposes of SA is to represent (or catch the essense) of the system
  as early as possible. The retionale is that we can analyse and evaluate this representation 
  and reveal pluses and minuses
* Possible Answers (Non-Functional Requirements)
  1. [ ] Accessibility
  2. [ ] Availability
  3. [ ] Exploitability
  4. [ ] Extensibility
  5. [ ] Interoperability
  6. [ ] Maintainability
  7. [ ] Modifiability
  8. [ ] Performance
  9. [ ] Portability
  10. [ ] Reliability
  11. [ ] Scalability
  12. [ ] Security
  13. [ ] Supportability
  14. [ ] Testability
  15. [ ] Usability
* Architectual Style deals with non-functional requirements
* If you have a class without state, it should, probable, be and interface
* The presence of a "God class" is a sign of a bad OOD
* Role-based Design Use cases as an alternative to OOD. Ends up with Collaboration Diagramm
  The whole idea is to create a really abstract representaion of the system backed by
  dependency inversion
*** Concepts
    + Role-based Design
      Based on Use cases. Specified by a Collaboration Diagramm
    + Dependency Inversion Principle
      Hight-level modules should NOT depend on low level ones. As an opposite to
      the principle of "Layered Architecture" (high level modules are built on to of
      low level one)
* In Interfaces or Abstract classes you capture the essance. Something really Abstract
  The abstract system in this case plays a role of Protocols (the names of an abstract
  methods that should be called)
* OOA vs. OOD
  Don't have:
  + Associations
  + Aggregations
  + Invariants
  + StateCharts
* System Design Issues
  + Architecture
  + Concurrency
  + Physical Design
  + Data Stores
  + Control
    Reactive vs. Proactive
  + Error and Failure Handling
  + Scalability
* Middleware as a mean to generialize local programming facilities to distrib systems
  Maps procedure call into RPC, set up objects global id, 
  object methond invocation into RMI and so on. Middleware provides
  transperancy for the client in a sence that a former does not distinguish
  whether the procedure call was local or remote.
* High Load Infrastructure
  In general the basic shema with replicated load-balancer, connected
  into worker servers. Where each worker server got access through
  DB replicated load balancer to the distributed storage is a great way 
  to start.
                             XXXXXXXXXXXXXXX
                         XXX              XX
                       XXX                 X
              XXXXXXXXXXXX                 XXXXXXXX
             XX          XXX               XX      XX
           XX                             XX         XX
           X                             XX           XX
           X            INTERNET                       X
           XX                                          X
            XXXX                                      XX
              XXXXX                             XXXXXX
                  XXXX X             XXXXXXXXXXX
                     XXXXXXXXXXXXXXXXX
                     ^  +
                     |  |
                     |  |
                     |  |  We may use several entry points utilizing DNS Server
                     |  v
                     |
              +------+--------+        +-----------------+
              |               +------> |                 |
              |Load Balancer  |        | Replica         |
              |               | ^------+                 |
      +-------+----------+----+--------------------------+-----+
      |                  |                                     |
      |                  |                                     |
      |                  |                                     |
      |                  |                                     |
      |                  |                                     |
      |                  |                                     |
+-----v------+     +-----v------+                  +-----------+--+
|            |     |            |                  |              |
|  Worker    |     | Worker     |    X   X   X     |  Worker      |
+-------+----+     +----+----+--+------------------+--------------+
        |               |    |
        |               |    |
        |               |    |
        |               |    |
        |               |    |
        |               |    |
        |     +---------v----v-+       +-----------------+
        |     |                +-----> |                 |
        +-----> DB Load Balancer       |  Replica        |
              |                + ^-----+                 |
              +--+-------------+----------+--------------+------------------------------+
                 |                        |                                             |
                 |                        |                                             |
                 |                        |                                             |
                 |                        |                                             |
                 |                        |                                             |
                 |                        |                                             |
                 |                        |                                             |
     +-----------v-----+          +-------v----------+                          +-------v----------+
     |                 |          |                  |                          |                  |
     |  Distrib DB     |          |  Distrib DB      |       X     X      X     |   Distrib DB     |
     |  Worker         |          |  Worker          |                          |   Worker         |
     |                 |          |                  |                          |                  |
     +-----------------+          +------------------+                          +------------------+

  + [ ] Retrieve photo for Blog under the high load conditions
  + [ ] BLOB. The idea is to separate references to binary files 
        and the contents itself. The content is stored in BLOB.
        Examples: Ambry, Warm, S3, Apache SWIFT
	Dropbox stores files metadata on it's servers and file content
	in Amazon S3
* MapReduce as a way to perform SQL queries on a cluster of machines
  Facebook HQL.
** TEZ employs graph-based algorithms
   Underlies Pig and HIVE in order to translate SQL queries into
   mapReduce jobs. It, basicaly, optimizes mapReduce schema for jobs

